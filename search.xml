<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表</title>
      <link href="/2022/03/14/%E2%80%9C%E7%BA%BF%E6%80%A7%E8%A1%A8%E2%80%9D/"/>
      <url>/2022/03/14/%E2%80%9C%E7%BA%BF%E6%80%A7%E8%A1%A8%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章：线性表"><a href="#第二章：线性表" class="headerlink" title="第二章：线性表"></a>第二章：线性表</h2><h3 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h3><ul><li>定义：线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列。其中n为表长。当n=0时 线性表是一个空表</li><li>特点：线性表中第一个元素称为表头元素；最后一个元素称为表尾元素。<br>除第一个元素外，每个元素有且仅有一个直接前驱。<br>除最后一个元素外，每个元素有且仅有一个直接后继。<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3></li><li>线性表的顺序存储又称为顺序表。<br>它是用一组地址连续的存储单元（比如C语言里面的数组），依次存储线性表中的数据元素，从而使得逻<br>辑上相邻的两个元素在物理位置上也相邻。</li><li>建立顺序表的三个属性: </li></ul><p>1.存储空间的起始位置（数组名data）<br>2.顺序表最大存储容量（MaxSize）<br>3.顺序表当前的长度（length）</p><ul><li>其实数组还可以动态分配空间，存储数组的空间是在程序执行过程中通过动态存储分配语句分配</li><li>总结：<ul><li>1.顺序表最主要的特点是随机访问（C语言中基于数组），即通过首地址和元素序号可以在O(1)的时间内找到指定的元素。</li><li>2.顺序表的存储密度高，每个结点只存储数据元素。无需给表中元素花费空间建立它们之间的逻辑关系（因为物理位置相邻特性决定）</li><li>3.顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。<h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3></li></ul></li><li>1.插入<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.判断表长是否超过数组长度</li><li>3.从后向前到第i个位置，分别将这些元素都向后移动一位</li><li>4.将该元素插入位置i 并修改表长</li></ul></li><li>代码</li><li>分析：<ul><li>最好情况：在表尾插入（即i=n+1），元素后移语句将不执行，时间复杂度为O(1)。</li><li>最坏情况：在表头插入（即i=1），元素后移语句将执行<br>n次，时间复杂度为O(n)。</li><li>平均情况：假设pi（pi=1/(n+1) ）是在第i个位置上插入<br>一个结点的概率，则在长度为n的线性表中插入一个结<br>点时所需移动结点的平均次数为</li></ul></li></ul></li><li>2.删除<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.取删除的元素</li><li>3.将被删元素后面的所有元素都依次向前移动一位</li><li>4.修改表长</li></ul></li><li>代码</li><li>分析<ul><li>最好情况：删除表尾元素（即i=n），无须移动元素，时间复杂度为O(1)。</li><li>最坏情况：删除表头元素（即i=1），需要移动除第一个元素外的所有元素，时间复杂度为O(n)。</li><li>平均情况：假设pi(pi=1/n)是删除第i个位置上结点的概率，则在长度为n的线性表中删除一个结点时所需移动结点的平均次数为<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3></li></ul></li></ul></li><li>线性表的链式存储是指通过一组任意的存储单元来存储线性表中的数据元素。</li><li>头结点和头指针的区别？<ul><li>不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点链表中的第一个结点，结点内通常不存储信息</li></ul></li><li>为什么要设置头结点？<ul><li>1.处理操作起来方便 例如：对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了</li><li>2.无论链表是否为空，其头指针是指向头结点的非空指针，因此空表和非空表的处理也就统一了。<h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3></li></ul></li><li>1.头插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表头</li><li>代码</li></ul></li><li>2.尾插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表尾</li><li>代码</li></ul></li><li>3.按序号查找结点<ul><li>在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域NULL。</li><li>代码</li></ul></li><li>4.按值查找结点<ul><li>从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。</li><li>代码</li></ul></li><li>5．插入<ul><li>插入操作是将值为x的新结点插入到单链表的第i个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i−1个结点，再在其后插入新结点。</li><li>算法思路：</li></ul>  1.取指向插入位置的前驱结点的指针<br>  ① p=GetElem(L,i-1);<br>  2.令新结点<em>s的指针域指向</em>p的后继结点<br>  ② s-&gt;next=p-&gt;next;<br>  3.令结点<em>p的指针域指向新插入的结点</em>s<br>  ③ p-&gt;next=s; </li><li>6．删除<ul><li>删除操作是将单链表的第i个结点删除。先检查删除位置的合法性，然后查找表中第i−1个结点，即被删结点的前驱结点，再将其删除。</li><li>算法思路：</li></ul>  1.取指向删除位置的前驱结点的指针 p=GetElem(L,i-1);<br>  2.取指向删除位置的指针 q=p-&gt;next;<br>  3.p指向结点的后继指向被删除结点的后继 p-&gt;next=q-&gt;next<br>  4.释放删除结点 free(q);<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3></li><li>定义</li><li>1.插入：(方法不唯一)<br>① s-&gt;next=p-&gt;next;<br>② p-&gt;next-&gt;prior=s;<br>③ s-&gt;prior=p;<br>④ p-&gt;next=s;</li><li>2.删除：<br>① p-&gt;next=q-&gt;next;<br>② q-&gt;next-&gt;prior=p;<br>③ free(q);</li></ul><h3 id="循环链表-amp-amp-静态链表"><a href="#循环链表-amp-amp-静态链表" class="headerlink" title="循环链表&amp;&amp;静态链表"></a>循环链表&amp;&amp;静态链表</h3><ul><li>循环单链表：循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环</li><li>循环双链表：类比循环单链表，循环双链表链表区别于双链表就是首尾结点构成环<ul><li>当循环双链表为空表时，其头结点的prior域和next域都等于Head。</li></ul></li><li>静态链表：静态链表是用数组来描述线性表的链式存储结构。<ul><li>数组第一个元素不存储数据，它的指针域存储第一个元素所在的数组下标。链表最后一个元素的指针域值为-1。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记</title>
      <link href="/2021/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：数据结构的术语"><a href="#第一章：数据结构的术语" class="headerlink" title="第一章：数据结构的术语"></a>第一章：数据结构的术语</h2><p>基本概念</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为<strong>结构</strong>（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括三方面的内容：<strong>逻辑结构</strong>、<strong>存储结构和数据的运算</strong>。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</li><li>数据的逻辑结构分为线性结构和非线性结构<ul><li>集合 结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。 类似于数学上的集合</li><li>线性结构 结构中的数据元素之间只存在一对一的关系。比如排队</li><li>树形结构 结构中的数据元素之间存在一对多的关系。比如家族族谱</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系。 比如地图</li></ul></li></ul><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><ul><li>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。<ul><li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li><li>链接存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li><li>索引存储：类似于目录，以后可以联系操作系统的文件系统章节来理解。</li><li>散列存储：通过关键字直接计算出元素的物理地址（以后详解）。</li></ul></li></ul><h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3><ul><li>1，有穷性：有限步之后结束</li><li>2，确定性：不存在二义性，即没有歧义</li><li>3，可行性：比如受限于计算机的计算能力，有些算法虽然理论上可行，但实际上无法完成。</li><li>4，输入：能被计算机处理的各种类型数据，如数字，音频，图像等等。</li><li>5，输出：一至多个程序输出结果。</li></ul><h3 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h3><ul><li>时间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法执行时间增长的快慢；</li><li>• 是问题规模的函数：T(n)是时间规模函数 时间复杂度主要分析T(n)的数量级</li><li>• T(n)=O(f(n)) f(n)是算法中基本运算的频度 一般我们考虑最坏情况下的时间复杂度</li></ul></li><li>空间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法所需空间的快慢；</li><li>• 是问题规模的函数：S(n)=O(g(n)) ；算法所需空间的增长率和g(n)的增长率相同。</li></ul></li></ul><h3 id="概要-复杂度计算为重点"><a href="#概要-复杂度计算为重点" class="headerlink" title="概要: 复杂度计算为重点"></a>概要: 复杂度计算为重点</h3><ul><li>常用的时间复杂度大小关系：</li><li>复杂度如何计算<ul><li>时间复杂度计算（单个循环体）<ul><li>直接关注循环体的执行次数，设为k </li></ul></li><li>时间复杂度计算（多个循环体）<ul><li>两个运算规则：乘法规则，加法规则。</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小付第一篇博客</title>
      <link href="/2021/07/07/firstpage/"/>
      <url>/2021/07/07/firstpage/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-第一篇博客的记录"><a href="#hexo-第一篇博客的记录" class="headerlink" title="hexo 第一篇博客的记录"></a>hexo 第一篇博客的记录</h3><ul><li>开启hexo 要在博客目录下 : hexo s </li><li>尝试安装 hexo-admin ，npm isntall总报错  直接去GitHub下载了解压到博客目录下，进入 <a href="http://localhost:4000/admin">http://localhost:4000/admin</a></li></ul><h3 id="MakDown-语法记录"><a href="#MakDown-语法记录" class="headerlink" title="MakDown 语法记录"></a>MakDown 语法记录</h3><ul><li><p>#表示标题 ，后面要有空格。 几个# 表示几级标题</p></li><li><p>分割线 ，连续输入3个以上- 或者* </p><hr><hr></li><li><p>无序列表 ，* ，+,- 空格开头</p></li><li><p>有序列表，以数字. 空格</p><ol><li>啦啦啦</li><li>哈哈哈哈<ol start="146"><li>啦啦啦</li><li>哈哈哈 它自己排序</li></ol></li></ol></li></ul><ul><li><p>两个 * 号 表示加粗 ，一个倾斜，三个粗斜体 ，两个=高亮，<del>两个表示删除线、<u></u>下划线、上标^ 、下标</del></p><p><strong>加粗 <strong>，<em>斜体</em>，*</strong>粗斜体*</strong>，== 亮 ==,<u> 下滑</u>，<del>删除删除</del>， 上^ ,下~ </p></li><li><p>链接格式  ， [名字]（地址） [小付的博客](<a href="https://fuchaoyan.github.io/">Hexo (fuchaoyan.github.io)</a>)</p></li></ul><ul><li><p>引用，使用   &gt; 加空格</p><blockquote><p>这里小付开始引用了·····</p><p>A:交朋友吗？</p><p>B: 没有共同爱好不行？</p><p>A:那可以培养嘛 ，你喜欢猪猪侠吗？</p></blockquote></li><li><p>代码 ，使用三个~接语言 如C++、python 空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure></li><li><p>表格  ，| 元素1 | 元素2 | 元素3 |   和线之间要空格</p><p>使用typora 可以用ctrl+i </p><table><thead><tr><th align="center">1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td align="center"></td><td></td><td></td></tr></tbody></table></li><li><p>任务 - [ ] 任务几  和线之间要空格 </p><ul><li><input disabled="" type="checkbox"> 毕业<ul><li><input disabled="" type="checkbox"> 找工作</li></ul></li></ul></li><li><p>注释 &lt;!–&gt;</p><p>&lt;!-balabalabal-&gt;</p><ul><li>对齐方法 </li></ul><p>&lt; center&gt;居中 使用html的那种写法 center &lt;/ center&gt;</p><p>左或右齐 &lt; p align= left&gt; or &lt; p align=right&gt;  </p></li><li><p>公式符号  <a href="https://blog.csdn.net/weixin_37590425/article/details/100108904">参考博客</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/24/hello-world/"/>
      <url>/2021/06/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
